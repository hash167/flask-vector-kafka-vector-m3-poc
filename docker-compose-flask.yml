version: "3.7"

services:

  webapp:
    build: ./webapp/
    container_name: webapp
    ports:
      - 5001:5001
    depends_on:
      - provisioner

  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.4.0
    depends_on:
      - zookeeper
      - kafka
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"

  kafka-topics-ui:
    image: landoop/kafka-topics-ui
    hostname: kafka-topics-ui
    container_name: kafka-topics-ui
    depends_on:
      - zookeeper
      - kafka
      - rest-proxy
    ports:
      - 18000:8000
    environment:
      KAFKA_REST_PROXY_URL: 'rest-proxy:8082'
      PROXY: 'true'
  
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=docker-local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  vector:
    image: timberio/vector:nightly-alpine
    container_name: vector
    ports:
      - 8888:8888
    volumes: 
      - $PWD/vector.toml:/etc/vector/vector.toml:ro
    depends_on:
      - kafka
      - provisioner
  
  m3db_seed:
    image: quay.io/m3db/m3dbnode:latest
    volumes:
      - "./config/m3/m3dbnode.yml:/etc/m3dbnode/m3dbnode.yml"
      - "./config/m3/schema.proto:/etc/m3dbnode/schema.proto"
    environment:
      - M3DB_HOST_ID=m3db_seed
    expose:
      - "2379"
      - "9002"
      - "9003"
      - "9004"
    ports:
      - "0.0.0.0:2379:2379"
      - "0.0.0.0:9002:9002"
      - "0.0.0.0:9003:9003"
      - "0.0.0.0:9004:9004"
    privileged: true
    cap_add:
      - ALL
  m3coordinator:
    expose:
      - "7201"
      - "7203"
      - "7204"
      - "7507"
    ports:
      - "0.0.0.0:7201:7201"
      - "0.0.0.0:7203:7203"
      - "0.0.0.0:7204:7204"
      - "0.0.0.0:7507:7507"

    image: quay.io/m3db/m3coordinator:latest
    volumes:
      - "./config/m3/m3coordinator.yml:/etc/m3coordinator/m3coordinator.yml"
      - "./config/m3/schema.proto:/etc/m3coordinator/schema.proto"
    depends_on:
      - "m3db_seed"
  m3query:
    expose:
      - "7201"
      - "7203"
      - "7204"
      - "7507"
    ports:
      - "0.0.0.0:7221:7201"
      - "0.0.0.0:7223:7203"
      - "0.0.0.0:7224:7204"
      - "0.0.0.0:7527:7507"

    image: quay.io/m3db/m3query:latest
    volumes:
      - "./config/m3/m3query.yml:/etc/m3query/m3query.yml"
    depends_on:
      - "provisioner"

  provisioner:
    environment:
      - USE_MULTI_DB_NODES=false
      - USE_MULTI_PROMETHEUS_NODES=false

    image: dwdraju/alpine-curl-jq:latest
    depends_on:
      - "m3db_seed"
    volumes:
      - "./bin/provision.sh:/tmp/provision.sh"
    entrypoint: /tmp/provision.sh

  grafana:
    expose:
      - "3000"
    ports:
      - "0.0.0.0:3000:3000"

    image: grafana/grafana:latest
    volumes:
      - "./config/grafana/provisioning/:/etc/grafana/provisioning/"
      - "./config/grafana/dashboards/:/var/lib/grafana/dashboards/"
    environment:
      - GF_LOG_LEVEL=error
    depends_on:
      - "provisioner"


